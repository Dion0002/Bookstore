name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  setup:
    runs-on: ubuntu-latest

    outputs:
      DATABASE_HOST: ${{ steps.capture_outputs.outputs.DB_ENDPOINT }}
      DATABASE_USER: ${{ steps.capture_outputs.outputs.DB_USER }}
      DATABASE_PASSWORD: ${{ steps.capture_outputs.outputs.DB_PASSWORD }}
      DATABASE_NAME: ${{ steps.capture_outputs.outputs.DB_NAME }}
      ECR_REPO_NAME: ${{ steps.capture_outputs.outputs.ECR_REPO_NAME }}
      ECR_URL: ${{ steps.capture_outputs.outputs.ECR_URL }}
      FULL_ECR: ${{ steps.capture_outputs.outputs.FULL_ECR }}
      EKS_CLUSTER_NAME: ${{ steps.capture_outputs.outputs.EKS_CLUSTER_NAME }}
      S3_BUCKET_NAME: ${{ steps.capture_outputs.outputs.S3_BUCKET_NAME }}

    steps:
      - id: checkout_code
        name: Checkout Code
        uses: actions/checkout@v3
        with:
          path: ./terraform  

      - id: configure_aws_credentials
        name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - id: setup_terraform
        name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.5

      - id: terraform_validate
        name: Terraform Validate
        run: terraform validate
        working-directory: ./terraform  


      - id: terraform_init
        name: Terraform Init
        run: terraform init
        working-directory: ./terraform  

      - id: terraform_fmt
        name: Terraform Fmt
        run: terraform fmt -recursive
        working-directory: ./terraform

      - id: terraform_apply
        name: Terraform Apply (with auto-approve)
        run: terraform apply -auto-approve
        working-directory: ./terraform  

      - id: capture_outputs
        name: Capture Terraform Outputs
        run: |
          echo "DB_ENDPOINT=$(terraform output db_instance_endpoint)" >> "$GITHUB_OUTPUT"
          echo "DB_USER=$(terraform output db_username)" >> "$GITHUB_OUTPUT"
          echo "DB_PASSWORD=$(terraform output db_password)" >> "$GITHUB_OUTPUT"
          echo "DB_NAME=$(terraform output db_name)" >> "$GITHUB_OUTPUT"
          echo "ECR_REPO_NAME=$(terraform output ecr_repository_name)" >> "$GITHUB_OUTPUT"
          echo "ECR_URL=$(terraform output ecr_repository_url)" >> "$GITHUB_OUTPUT"
          echo "FULL_ECR=$(terraform output full_ecr_url)" >> "$GITHUB_OUTPUT"
          echo "EKS_CLUSTER_NAME=$(terraform output eks_cluster_name)" >> "$GITHUB_OUTPUT"
          echo "S3_BUCKET_NAME=$(terraform output s3_bucket_name)" >> "$GITHUB_OUTPUT"
        working-directory: ./terraform

  api:
    runs-on: ubuntu-latest
    needs: setup

    outputs:
      EXTERNAL_IP: ${{ steps.get_external_ip.outputs.external_ip }} 

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_URL: ${{ needs.setup.outputs.ECR_URL }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t "${{ env.ECR_URL }}:${{ env.IMAGE_TAG }}" ./api
          docker push "${{ env.ECR_URL }}:${{ env.IMAGE_TAG }}"
          echo "IMAGE_URL=${{ env.ECR_URL }}:${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT

      - name: Setup Kubeconfig for EKS
        uses: actions-hub/kubectl@master
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}  

      - name: Get External IP of API Service
        id: get_external_ip
        run: |
          EXTERNAL_IP=$(kubectl get svc api-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          echo "external_ip=$EXTERNAL_IP" >> $GITHUB_OUTPUT

      - name: Replace environment variables in deployment.yaml using envsubst
        run: |
          export DATABASE_HOST="${{ needs.setup.outputs.DATABASE_HOST }}"
          export DATABASE_USER="${{ needs.setup.outputs.DATABASE_USER }}"
          export DATABASE_PASSWORD="${{ needs.setup.outputs.DATABASE_PASSWORD }}"
          export DATABASE_NAME="${{ needs.setup.outputs.DATABASE_NAME }}"
          export ECR_URL="${{ needs.setup.outputs.ECR_URL }}"
          export FULL_ECR="${{ needs.setup.outputs.FULL_ECR }}"
          export EXTERNAL_IP="${{ steps.get_external_ip.outputs.external_ip }}"  
          envsubst < ./api/api-deployment.yaml | kubectl apply -f -

  frontend:
    runs-on: ubuntu-latest
    needs: api

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build React App
        run: |
          export REACT_APP_SERVER_URL="${{ needs.api.outputs.EXTERNAL_IP }}"  
          npm run build

      - name: Sync to S3
        run: |
          aws s3 sync ./web_client/build s3://${{ needs.setup.outputs.S3_BUCKET_NAME }} --delete  
